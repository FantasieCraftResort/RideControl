plugins {
    id "java"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = 'me.tyfcho'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://ci.mg-dev.eu/plugin/repository/everything"
    }

}

dependencies {
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")

    // PlaceholderAPI
    compileOnly("me.clip:placeholderapi:2.11.5")

    // BKCommonLib
    compileOnly("com.bergerkiller.bukkit:BKCommonLib:1.21.1-v1")

    // SoftDependency if needed
    compileOnly("com.bergerkiller.bukkit.softdependency:1.21.1-v1")

    // Cloud integrated in BKCommonLib
    compileOnly("org.incendo:cloud-paper")
    compileOnly("org.incendo:cloud-annotations")
    compileOnly("org.incendo:cloud-minecraft-extras")

    // Adventure MiniMessage
    implementation("net.kyori:adventure-api:4.14.0")
    implementation("net.kyori:adventure-text-minimessage:4.14.0")
}

tasks {
    compileJava {
        options.encoding = "UTF-8"
    }

    processResources {
        filteringCharset = "UTF-8"
    }

    jar {
        archiveBaseName.set(project.name)
        archiveVersion.set(project.version.toString())
    }
    shadowJar {
        def commonPrefix = "com.bergerkiller.bukkit.common.dep"
        relocate("org.incendo.cloud", "${commonPrefix}.cloud")
        relocate("io.leangen.geantyref", "${commonPrefix}.typetoken")
        relocate("me.lucko.commodore", "${commonPrefix}.me.lucko.commodore")
        relocate("net.kyori", "${commonPrefix}.net.kyori")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
